# ÁõëÊéßSQLÈ™åËØÅËÑöÊú¨
# ‰ΩøÁî®ÊñπÊ≥ï: .\validate_monitoring_sql.ps1

Write-Host "üîç PostgreSQLÁõëÊéßSQLÈ™åËØÅÂ∑•ÂÖ∑" -ForegroundColor Cyan
Write-Host "=" * 60

# ÈÖçÁΩÆ
$PGHOST = "localhost"
$PGPORT = "5432"
$PGUSER = "postgres"
$PGPASSWORD = "666110"
$PGDATABASE = "postgres"

# ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
$env:PGPASSWORD = $PGPASSWORD

# Êü•Êâæpsql
$psqlPath = $null
$searchPaths = @(
    "C:\Program Files\PostgreSQL\17\bin\psql.exe",
    "C:\Program Files\PostgreSQL\16\bin\psql.exe",
    "C:\PostgreSQL\bin\psql.exe"
)

foreach ($path in $searchPaths) {
    if (Test-Path $path) {
        $psqlPath = $path
        Write-Host "‚úÖ Found psql: $psqlPath" -ForegroundColor Green
        break
    }
}

if (-not $psqlPath) {
    Write-Host "‚ùå psql not found. Please add PostgreSQL bin directory to PATH" -ForegroundColor Red
    Write-Host ""
    Write-Host "ÊâãÂä®Êü•Êâæpsql.exe:" -ForegroundColor Yellow
    Write-Host 'Get-ChildItem "C:\Program Files" -Recurse -Filter "psql.exe" -ErrorAction SilentlyContinue'
    exit 1
}

# ÊµãËØïËøûÊé•
Write-Host ""
Write-Host "üîå Testing PostgreSQL connection..." -ForegroundColor Cyan
& $psqlPath -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE -c "SELECT version();" 2>&1 | Out-Null

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Cannot connect to PostgreSQL" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Connected to PostgreSQL" -ForegroundColor Green

# ËØªÂèñÁõëÊéßSQLÊñá‰ª∂
$sqlFile = "09_deployment_ops\monitoring_queries.sql"
if (-not (Test-Path $sqlFile)) {
    Write-Host "‚ùå SQL file not found: $sqlFile" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üìä Validating monitoring queries from $sqlFile" -ForegroundColor Cyan
Write-Host "=" * 60

# ÊèêÂèñÂπ∂È™åËØÅSQLÊü•ËØ¢
$content = Get-Content $sqlFile -Raw
$queries = $content -split '-- (?=\d+\.)' | Where-Object { $_ -match '^\d+\.' }

$totalQueries = 0
$successQueries = 0
$failedQueries = 0

foreach ($query in $queries) {
    # ÊèêÂèñÊü•ËØ¢Ê†áÈ¢ò
    if ($query -match '^(\d+\.\s+[^\n]+)') {
        $title = $matches[1].Trim()
        $totalQueries++
        
        # ÊèêÂèñSQLËØ≠Âè• (Âú®SELECTÂíå;‰πãÈó¥)
        if ($query -match '(SELECT[\s\S]+?;)') {
            $sql = $matches[1].Trim()
            
            Write-Host ""
            Write-Host "[$totalQueries] $title" -ForegroundColor Yellow
            
            # ÊâßË°åÊü•ËØ¢ÔºàÈôêÂà∂ËøîÂõû1Ë°å‰ª•Âä†ÈÄüÔºâ
            try {
                $result = & $psqlPath -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE -t -c "$sql LIMIT 1" 2>&1
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "  ‚úÖ Success" -ForegroundColor Green
                    $successQueries++
                } else {
                    Write-Host "  ‚ùå Failed: $result" -ForegroundColor Red
                    $failedQueries++
                }
            } catch {
                Write-Host "  ‚ùå Error: $_" -ForegroundColor Red
                $failedQueries++
            }
        }
    }
}

# ÊÄªÁªì
Write-Host ""
Write-Host "=" * 60
Write-Host "üìä Validation Summary" -ForegroundColor Cyan
Write-Host "=" * 60
Write-Host "Total queries:   $totalQueries"
Write-Host "‚úÖ Success:      $successQueries ($([math]::Round($successQueries/$totalQueries*100, 1))%)" -ForegroundColor Green
Write-Host "‚ùå Failed:       $failedQueries ($([math]::Round($failedQueries/$totalQueries*100, 1))%)" -ForegroundColor Red

if ($failedQueries -eq 0) {
    Write-Host ""
    Write-Host "üéâ All monitoring queries validated successfully!" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Some queries failed. Please check the errors above." -ForegroundColor Yellow
}

